# docker-compose.yml

services:
  # Valkey (a fork of Redis) for BullMQ
  valkey:
    image: valkey/valkey
    ports:
      - "6379:6379"
    volumes:
      - valkey-data:/data

  # Qdrant for vector storage
  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data:/qdrant/storage

  # MongoDB for your application data
  mongo:
    image: mongo:6
    restart: always
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"

  # Your main Express server application
  server:
    build: .
    env_file: .env
    ports:
      - "3001:3001"
    # This command starts your Express server
    command: ["node", "dist/server.js"]
    depends_on:
      - mongo
      - qdrant
      - valkey

  # Your background BullMQ worker
  worker:
    build: .
    env_file: .env
    # This command starts your worker script
    # Note: The path is based on your tsconfig.json output directory (`dist`)
    command: ["node", "dist/src/workers/worker.js"]
    depends_on:
      - valkey  # Worker primarily depends on the queue (Valkey/Redis)
      - mongo   # And the DB to update status

# Define volumes for data persistence
volumes:
  mongo-data:
  qdrant-data:
  valkey-data:


  dockerfile:: # ─── STAGE 1: Build ───────────────────────────────────────────────
FROM node:20-alpine AS builder
WORKDIR /app

# 1. Copy package files & install all deps
COPY package.json package-lock.json ./
RUN npm ci

# 2. Copy source and compile
COPY tsconfig.json ./
COPY server.ts ./
COPY src ./src

# # Copy public so it will be picked up in final image
# COPY public ./public
RUN npx tsc

# ─── STAGE 2: Production ────────────────────────────────────────
FROM node:20-alpine
WORKDIR /app

# 1. Copy only prod deps
COPY package.json package-lock.json ./
RUN npm ci --omit=dev

# 2. Copy compiled output
COPY --from=builder /app/dist ./dist

# 3. (Optional) Copy entrypoint .env if you truly want to bake it in.
#    But in most workflows you’ll use `--env-file` at `docker run` time instead.
# COPY .env ./

ENV PORT=3001
EXPOSE 3001

CMD ["node", "dist/server.js"]
